/*­­­­Sección de declaraciones package e imports­­­­­­­­­*/
import java_cup.runtime.*;
/*­­­­ Sección componentes de código de usuario ­­­­*/
parser code {:
    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }


:};
/*­­­ Declaración de la lista de símbolos de la gramática ­­­­­*/

//poner tambien el tipo de cada terminal

/*No usados
,WHEN,YIELD,CASE,DOUBLE,PA,PC,FOR,NOT,DEFINED,NIL,IN,ARROBA,CLASS,CA,CC
,RETURN,SUPER,SELF,COMA,GLOBAL,LOGICO,BREAK,UNDEF,REDO,MODULE,LITERAL
,OPERADOR,PUNTO,CONCATENACION,STRING,DEF,ALIAS,ENSURE,
RESCUE


*/
/* Produciones de flujo normal */
terminal  DO,IF,WHILE,UNLESS,UNTIL,END,ELSIF,ELSE,THEN,INT,
ID,ASIGNACION,COMPARACION,SEMICOLON,CRLF;
//aqui deberemos poner el tipo de objeto
non terminal prog,expression_list,expression,rvalue,bvalue,bucle_if,cons_unless,cons_if,bucle_while,
assignment,lvalue,terminator,op;


precedence left SEMICOLON,CRLF;
/* ­­­­­­­­­­­­­­ Declaración de la gramática  ­­­­­­­­­­­*/
prog ::= expression_list;



expression_list::= expression terminator expression_list|
                  expression terminator;

expression ::= rvalue |
              bvalue|
              bucle_if|
              bucle_while;
rvalue ::= assignment | rvalue op rvalue | INT;

bvalue ::= rvalue COMPARACION rvalue;

bucle_if ::= IF expression THEN CRLF expression_list cons_if
		 | IF expression CRLF expression_list cons_if
		 | UNLESS expression THEN CRLF expression_list cons_unless
         | UNLESS expression CRLF expression_list cons_unless
         ;
cons_unless ::= ELSE CRLF expression_list CRLF END
            | CRLF END
            ;
cons_if  ::= ELSIF expression THEN CRLF expression_list cons_if
		 | ELSIF expression CRLF expression_list cons_if
         | ELSE CRLF expression_list END
         | END
         ;
bucle_while ::= WHILE expression CRLF DO CRLF expression_list END
	    | WHILE expression terminator
	    | UNTIL expression CRLF DO expression_list END
	    ;
assignment ::= lvalue ASIGNACION rvalue;
lvalue ::= ID ;

terminator ::= SEMICOLON terminator| CRLF terminator | SEMICOLON | CRLF;
