
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 25 13:16:21 CET 2018
//----------------------------------------------------

import java.util.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 25 13:16:21 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\022\005\000\002\022\003\000\002\021" +
    "\003\000\002\021\005\000\002\006\004\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\011\005\000\002" +
    "\012\005\000\002\013\005\000\002\014\013\000\002\015" +
    "\005\000\002\016\003\000\002\017\003\000\002\020\004" +
    "\000\002\020\004\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\012\004\016\012\021\014\005\015\020\001" +
    "\002\000\014\007\uffec\010\uffec\011\uffec\023\uffec\024\uffec" +
    "\001\002\000\024\007\uffe3\010\uffe3\011\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3\001\002\000\006" +
    "\010\ufffc\011\ufffc\001\002\000\006\010\ufff9\011\ufff9\001" +
    "\002\000\006\010\ufffb\011\ufffb\001\002\000\014\007\uffed" +
    "\010\uffed\011\uffed\023\uffed\024\uffed\001\002\000\014\007" +
    "\uffee\010\uffee\011\uffee\023\uffee\024\uffee\001\002\000\024" +
    "\007\uffeb\010\uffeb\011\uffeb\017\062\020\064\021\063\022" +
    "\065\023\uffeb\024\uffeb\001\002\000\004\002\061\001\002" +
    "\000\006\010\053\011\055\001\002\000\006\013\034\014" +
    "\005\001\002\000\014\007\uffef\010\uffef\011\uffef\023\uffef" +
    "\024\uffef\001\002\000\010\010\uffe4\011\uffe4\016\032\001" +
    "\002\000\010\013\027\014\005\015\020\001\002\000\006" +
    "\010\ufffa\011\ufffa\001\002\000\006\010\ufffd\011\ufffd\001" +
    "\002\000\004\002\001\001\002\000\006\010\ufff5\011\ufff5" +
    "\001\002\000\006\010\ufff7\011\ufff7\001\002\000\006\010" +
    "\ufff8\011\ufff8\001\002\000\006\010\ufff0\011\ufff0\001\002" +
    "\000\006\010\ufff6\011\ufff6\001\002\000\004\014\005\001" +
    "\002\000\006\010\uffe5\011\uffe5\001\002\000\006\007\ufff2" +
    "\024\ufff2\001\002\000\006\007\ufff3\024\051\001\002\000" +
    "\004\023\047\001\002\000\004\007\040\001\002\000\004" +
    "\011\041\001\002\000\012\004\016\012\021\014\005\015" +
    "\020\001\002\000\004\006\043\001\002\000\004\011\044" +
    "\001\002\000\012\004\016\012\021\014\005\015\020\001" +
    "\002\000\004\005\046\001\002\000\006\010\uffe6\011\uffe6" +
    "\001\002\000\004\014\005\001\002\000\006\007\ufff1\024" +
    "\ufff1\001\002\000\006\013\034\014\005\001\002\000\004" +
    "\007\ufff4\001\002\000\024\002\uffe0\004\uffe0\005\uffe0\006" +
    "\uffe0\010\053\011\055\012\uffe0\014\uffe0\015\uffe0\001\002" +
    "\000\020\002\ufffe\004\016\005\ufffe\006\ufffe\012\021\014" +
    "\005\015\020\001\002\000\024\002\uffdf\004\uffdf\005\uffdf" +
    "\006\uffdf\010\053\011\055\012\uffdf\014\uffdf\015\uffdf\001" +
    "\002\000\020\002\uffe1\004\uffe1\005\uffe1\006\uffe1\012\uffe1" +
    "\014\uffe1\015\uffe1\001\002\000\010\002\uffff\005\uffff\006" +
    "\uffff\001\002\000\020\002\uffe2\004\uffe2\005\uffe2\006\uffe2" +
    "\012\uffe2\014\uffe2\015\uffe2\001\002\000\004\002\000\001" +
    "\002\000\004\014\005\001\002\000\004\014\005\001\002" +
    "\000\004\014\005\001\002\000\004\014\005\001\002\000" +
    "\014\007\uffe7\010\uffe7\011\uffe7\023\uffe7\024\uffe7\001\002" +
    "\000\014\007\uffe9\010\uffe9\011\uffe9\023\uffe9\024\uffe9\001" +
    "\002\000\014\007\uffe8\010\uffe8\011\uffe8\023\uffe8\024\uffe8" +
    "\001\002\000\014\007\uffea\010\uffea\011\uffea\023\uffea\024" +
    "\uffea\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\034\002\013\003\023\004\014\006\022\007" +
    "\021\010\016\011\011\012\010\013\003\014\006\015\005" +
    "\016\007\017\012\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\053\001\001\000\022\007\035" +
    "\010\016\011\011\012\010\013\003\017\012\021\034\022" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\005\027\007\030\010\016\011\011\012\010\013\003\015" +
    "\024\016\025\017\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\007\032\010\016\011\011\012\010\013\003\017" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\041\004\014\006\022\007\021\010\016" +
    "\011\011\012\010\013\003\014\006\015\005\016\007\017" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\003\044\004\014\006\022\007\021\010\016\011\011\012" +
    "\010\013\003\014\006\015\005\016\007\017\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\007\047\010" +
    "\016\011\011\012\010\013\003\017\012\001\001\000\002" +
    "\001\001\000\022\007\035\010\016\011\011\012\010\013" +
    "\003\017\012\021\034\022\051\001\001\000\002\001\001" +
    "\000\004\020\057\001\001\000\032\003\056\004\014\006" +
    "\022\007\021\010\016\011\011\012\010\013\003\014\006" +
    "\015\005\016\007\017\012\001\001\000\004\020\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\007\070\010\016\011\011\012" +
    "\010\013\003\017\012\001\001\000\016\007\067\010\016" +
    "\011\011\012\010\013\003\017\012\001\001\000\016\007" +
    "\066\010\016\011\011\012\010\013\003\017\012\001\001" +
    "\000\016\007\065\010\016\011\011\012\010\013\003\017" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de lÃ­nea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayor o igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // terminator ::= CRLF 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // terminator ::= SEMICOLON 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // terminator ::= CRLF terminator 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // terminator ::= SEMICOLON terminator 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // number ::= INT 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("number",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // reference ::= ID 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("reference",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // assignment ::= ID ASIGNACION rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bucle_if ::= IF condif_list THEN CRLF expression_list ELSE CRLF expression_list END 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_if",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // div ::= number DIV rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("div",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // mul ::= number MUL rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mul",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // minus ::= number MINUS rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("minus",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // plus ::= number PLUS rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("plus",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // rvalue ::= number 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // rvalue ::= div 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // rvalue ::= mul 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // rvalue ::= minus 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // rvalue ::= plus 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // puts ::= PUTS expression 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("puts",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression_bool ::= rvalue COMPARACION rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_bool",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression_bool ::= BOOLEAN 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_bool",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // condif_list ::= expression_bool 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condif_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // condif_list ::= expression_bool LOGICO condif_list 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condif_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= assignment 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= reference 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= BOOLEAN 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentence ::= bucle_if 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentence ::= rvalue 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentence ::= reference 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentence ::= assignment 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentence ::= puts 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentence",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression_list ::= sentence terminator 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression_list ::= sentence terminator expression_list 
            {
              ASTNode RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

