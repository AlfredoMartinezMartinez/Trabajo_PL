
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jan 25 01:32:31 CET 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jan 25 01:32:31 CET 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\004\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\005\000\002\005\003\000\002\006\005\000\002" +
    "\007\010\000\002\007\007\000\002\007\010\000\002\007" +
    "\007\000\002\010\007\000\002\010\004\000\002\011\010" +
    "\000\002\011\007\000\002\011\006\000\002\011\003\000" +
    "\002\012\011\000\002\012\005\000\002\012\010\000\002" +
    "\013\005\000\002\014\003\000\002\015\004\000\002\015" +
    "\004\000\002\015\003\000\002\015\003\000\002\016\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\016\005\013\006\006\007\004\010\017\015" +
    "\005\016\014\001\002\000\016\005\013\006\006\007\004" +
    "\010\017\015\005\016\014\001\002\000\014\014\ufff7\020" +
    "\ufff7\021\ufff7\022\ufff7\023\ufff7\001\002\000\016\005\013" +
    "\006\006\007\004\010\017\015\005\016\014\001\002\000" +
    "\010\014\ufffa\021\ufffa\022\ufffa\001\002\000\014\014\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\001\002\000\010\014" +
    "\ufffb\021\ufffb\022\ufffb\001\002\000\004\002\073\001\002" +
    "\000\016\005\013\006\006\007\004\010\017\015\005\016" +
    "\014\001\002\000\004\017\uffe7\001\002\000\006\021\040" +
    "\022\041\001\002\000\014\014\ufffd\020\035\021\ufffd\022" +
    "\ufffd\023\025\001\002\000\016\005\013\006\006\007\004" +
    "\010\017\015\005\016\014\001\002\000\010\014\ufffc\021" +
    "\ufffc\022\ufffc\001\002\000\004\017\023\001\002\000\004" +
    "\002\001\001\002\000\006\015\005\016\014\001\002\000" +
    "\014\014\uffe8\020\uffe8\021\uffe8\022\uffe8\023\025\001\002" +
    "\000\006\015\uffe2\016\uffe2\001\002\000\006\015\005\016" +
    "\014\001\002\000\014\014\ufff8\020\ufff8\021\ufff8\022\ufff8" +
    "\023\025\001\002\000\004\022\031\001\002\000\004\004" +
    "\032\001\002\000\016\005\013\006\006\007\004\010\017" +
    "\015\005\016\014\001\002\000\004\011\034\001\002\000" +
    "\010\014\uffe9\021\uffe9\022\uffe9\001\002\000\006\015\005" +
    "\016\014\001\002\000\012\014\ufff6\021\ufff6\022\ufff6\023" +
    "\025\001\002\000\030\002\ufffe\005\013\006\006\007\004" +
    "\010\017\011\ufffe\012\ufffe\013\ufffe\015\005\016\014\022" +
    "\ufffe\001\002\000\034\002\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016" +
    "\uffe4\021\uffe4\022\uffe4\001\002\000\034\002\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\015\uffe3\016\uffe3\021\uffe3\022\uffe3\001\002\000\034" +
    "\002\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012" +
    "\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5\021\uffe5\022\uffe5" +
    "\001\002\000\034\002\uffe6\005\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6" +
    "\021\uffe6\022\uffe6\001\002\000\014\002\uffff\011\uffff\012" +
    "\uffff\013\uffff\022\uffff\001\002\000\006\014\046\022\047" +
    "\001\002\000\004\022\070\001\002\000\016\005\013\006" +
    "\006\007\004\010\017\015\005\016\014\001\002\000\010" +
    "\011\054\012\053\013\051\001\002\000\004\022\065\001" +
    "\002\000\010\014\ufff4\021\ufff4\022\ufff4\001\002\000\016" +
    "\005\013\006\006\007\004\010\017\015\005\016\014\001" +
    "\002\000\010\014\uffec\021\uffec\022\uffec\001\002\000\006" +
    "\014\057\022\056\001\002\000\016\005\013\006\006\007" +
    "\004\010\017\015\005\016\014\001\002\000\004\022\060" +
    "\001\002\000\016\005\013\006\006\007\004\010\017\015" +
    "\005\016\014\001\002\000\010\011\054\012\053\013\051" +
    "\001\002\000\010\014\uffef\021\uffef\022\uffef\001\002\000" +
    "\010\011\054\012\053\013\051\001\002\000\010\014\uffee" +
    "\021\uffee\022\uffee\001\002\000\016\005\013\006\006\007" +
    "\004\010\017\015\005\016\014\001\002\000\004\011\067" +
    "\001\002\000\010\014\uffed\021\uffed\022\uffed\001\002\000" +
    "\016\005\013\006\006\007\004\010\017\015\005\016\014" +
    "\001\002\000\010\011\054\012\053\013\051\001\002\000" +
    "\010\014\ufff5\021\ufff5\022\ufff5\001\002\000\004\002\000" +
    "\001\002\000\006\021\040\022\076\001\002\000\010\014" +
    "\uffea\021\uffea\022\uffea\001\002\000\012\004\077\014\uffe3" +
    "\021\uffe3\022\uffe3\001\002\000\004\022\100\001\002\000" +
    "\016\005\013\006\006\007\004\010\017\015\005\016\014" +
    "\001\002\000\004\011\102\001\002\000\010\014\uffeb\021" +
    "\uffeb\022\uffeb\001\002\000\006\014\104\022\105\001\002" +
    "\000\004\022\117\001\002\000\016\005\013\006\006\007" +
    "\004\010\017\015\005\016\014\001\002\000\006\013\110" +
    "\022\107\001\002\000\004\011\116\001\002\000\004\022" +
    "\112\001\002\000\010\014\ufff2\021\ufff2\022\ufff2\001\002" +
    "\000\016\005\013\006\006\007\004\010\017\015\005\016" +
    "\014\001\002\000\004\022\114\001\002\000\004\011\115" +
    "\001\002\000\010\014\ufff1\021\ufff1\022\ufff1\001\002\000" +
    "\010\014\ufff0\021\ufff0\022\ufff0\001\002\000\016\005\013" +
    "\006\006\007\004\010\017\015\005\016\014\001\002\000" +
    "\006\013\110\022\107\001\002\000\010\014\ufff3\021\ufff3" +
    "\022\ufff3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\117\000\024\002\011\003\021\004\014\005\015\006" +
    "\017\007\010\012\006\013\007\014\020\001\001\000\020" +
    "\004\102\005\015\006\017\007\010\012\006\013\007\014" +
    "\020\001\001\000\002\001\001\000\020\004\073\005\015" +
    "\006\017\007\010\012\006\013\007\014\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\044\005\015\006\017\007\010\012" +
    "\006\013\007\014\020\001\001\000\002\001\001\000\004" +
    "\015\036\001\001\000\004\016\025\001\001\000\020\004" +
    "\027\005\015\006\017\007\010\012\006\013\007\014\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\023\013\007\014\020\001\001\000\004" +
    "\016\025\001\001\000\002\001\001\000\010\005\026\013" +
    "\007\014\020\001\001\000\004\016\025\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\032\004\014\005" +
    "\015\006\017\007\010\012\006\013\007\014\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\035\013" +
    "\007\014\020\001\001\000\004\016\025\001\001\000\022" +
    "\003\043\004\014\005\015\006\017\007\010\012\006\013" +
    "\007\014\020\001\001\000\004\015\042\001\001\000\004" +
    "\015\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\047\004\014\005\015\006\017\007\010\012\006\013" +
    "\007\014\020\001\001\000\004\011\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\004\054\005\015\006" +
    "\017\007\010\012\006\013\007\014\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\062\004\014\005" +
    "\015\006\017\007\010\012\006\013\007\014\020\001\001" +
    "\000\002\001\001\000\022\003\060\004\014\005\015\006" +
    "\017\007\010\012\006\013\007\014\020\001\001\000\004" +
    "\011\061\001\001\000\002\001\001\000\004\011\063\001" +
    "\001\000\002\001\001\000\022\003\065\004\014\005\015" +
    "\006\017\007\010\012\006\013\007\014\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\070\004\014" +
    "\005\015\006\017\007\010\012\006\013\007\014\020\001" +
    "\001\000\004\011\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\074\001\001\000\002\001\001\000" +
    "\004\015\041\001\001\000\002\001\001\000\022\003\100" +
    "\004\014\005\015\006\017\007\010\012\006\013\007\014" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\105\004\014\005" +
    "\015\006\017\007\010\012\006\013\007\014\020\001\001" +
    "\000\004\010\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\003\112\004\014\005\015" +
    "\006\017\007\010\012\006\013\007\014\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\117\004\014\005\015\006\017\007" +
    "\010\012\006\013\007\014\020\001\001\000\004\010\120" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info) {
       	StringBuffer m = new StringBuffer("Error");
		System.out.println("Mensaje: "+message);
		System.out.println("info: "+info.toString());
		if(info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s=((java_cup.runtime.Symbol)info);
			/* Comprueba si el numero de línea es mayor o igual que cero */
			if(s.left >= 0) {
				m.append(" en linea "+(s.left+1));
				/*Comprueba si el numero de columna es mayoro igual que cero */
				if (s.right >= 0)
					m.append(", y columna "+(s.right+1));
			}
		}
		m.append(" : "+message);
		System.err.println(m);
    }
    public void report_fatal_error(String message, Object info) {
       	report_error(message, info);
		System.exit(1);
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // op ::= OPERADOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("op",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // terminator ::= CRLF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // terminator ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // terminator ::= CRLF terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // terminator ::= SEMICOLON terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("terminator",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // lvalue ::= ID 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // assignment ::= lvalue ASIGNACION rvalue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bucle_while ::= UNTIL expression CRLF DO expression_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bucle_while ::= WHILE expression terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bucle_while ::= WHILE expression CRLF DO CRLF expression_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_while",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cons_if ::= END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_if",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cons_if ::= ELSE CRLF expression_list END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_if",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cons_if ::= ELSIF expression CRLF expression_list cons_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_if",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cons_if ::= ELSIF expression THEN CRLF expression_list cons_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_if",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cons_unless ::= CRLF END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_unless",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cons_unless ::= ELSE CRLF expression_list CRLF END 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_unless",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bucle_if ::= UNLESS expression CRLF expression_list cons_unless 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bucle_if ::= UNLESS expression THEN CRLF expression_list cons_unless 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bucle_if ::= IF expression CRLF expression_list cons_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bucle_if ::= IF expression THEN CRLF expression_list cons_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bucle_if",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bvalue ::= rvalue COMPARACION rvalue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bvalue",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // rvalue ::= INT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // rvalue ::= rvalue op rvalue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // rvalue ::= assignment 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("rvalue",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= bucle_while 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= bucle_if 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= bvalue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= rvalue 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression_list ::= expression terminator 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression_list ::= expression terminator expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // prog ::= expression_list 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

