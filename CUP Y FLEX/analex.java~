/* The following code was generated by JFlex 1.6.1 */

//* --------------------------Seccion codigo-usuario ------------------------*/

import java_cup.runtime.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>AnalizadorLexico.flex</tt>
 */
class analex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\52\1\0\1\3\1\47\1\47\1\4\16\52\4\0\1\0\1\20"+
    "\1\51\1\0\1\52\1\7\1\13\1\0\1\0\1\0\1\11\1\7"+
    "\1\0\1\10\1\6\1\7\12\53\1\0\1\5\1\16\1\12\1\17"+
    "\1\42\1\0\32\1\1\0\1\0\1\0\1\15\1\2\1\0\1\22"+
    "\1\45\1\43\1\24\1\30\1\31\1\1\1\36\1\33\1\1\1\46"+
    "\1\32\1\44\1\23\1\25\1\41\1\1\1\26\1\34\1\37\1\27"+
    "\1\1\1\35\1\1\1\40\1\1\1\0\1\14\1\0\1\21\6\52"+
    "\1\50\32\52\2\0\4\52\4\0\1\52\2\0\1\52\7\0\1\52"+
    "\4\0\1\52\5\0\27\52\1\0\37\52\1\0\u01ca\52\4\0\14\52"+
    "\16\0\5\52\7\0\1\52\1\0\1\52\21\0\165\52\1\0\2\52"+
    "\2\0\4\52\10\0\1\52\1\0\3\52\1\0\1\52\1\0\24\52"+
    "\1\0\123\52\1\0\213\52\1\0\5\52\2\0\236\52\11\0\46\52"+
    "\2\0\1\52\7\0\47\52\7\0\1\52\1\0\55\52\1\0\1\52"+
    "\1\0\2\52\1\0\2\52\1\0\1\52\10\0\33\52\5\0\3\52"+
    "\15\0\5\52\6\0\1\52\4\0\13\52\5\0\112\52\4\0\146\52"+
    "\1\0\11\52\1\0\12\52\1\0\23\52\2\0\1\52\17\0\74\52"+
    "\2\0\145\52\16\0\66\52\4\0\1\52\5\0\56\52\22\0\34\52"+
    "\104\0\1\52\1\0\13\52\67\0\33\52\1\0\144\52\2\0\12\52"+
    "\1\0\7\52\1\0\7\52\1\0\3\52\1\0\10\52\2\0\2\52"+
    "\2\0\26\52\1\0\7\52\1\0\1\52\3\0\4\52\2\0\11\52"+
    "\2\0\2\52\2\0\4\52\10\0\1\52\4\0\2\52\1\0\5\52"+
    "\2\0\16\52\7\0\1\52\5\0\3\52\1\0\6\52\4\0\2\52"+
    "\2\0\26\52\1\0\7\52\1\0\2\52\1\0\2\52\1\0\2\52"+
    "\2\0\1\52\1\0\5\52\4\0\2\52\2\0\3\52\3\0\1\52"+
    "\7\0\4\52\1\0\1\52\7\0\20\52\13\0\3\52\1\0\11\52"+
    "\1\0\3\52\1\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52"+
    "\2\0\12\52\1\0\3\52\1\0\3\52\2\0\1\52\17\0\4\52"+
    "\2\0\12\52\1\0\1\52\17\0\3\52\1\0\10\52\2\0\2\52"+
    "\2\0\26\52\1\0\7\52\1\0\2\52\1\0\5\52\2\0\11\52"+
    "\2\0\2\52\2\0\3\52\10\0\2\52\4\0\2\52\1\0\5\52"+
    "\2\0\12\52\1\0\1\52\20\0\2\52\1\0\6\52\3\0\3\52"+
    "\1\0\4\52\3\0\2\52\1\0\1\52\1\0\2\52\3\0\2\52"+
    "\3\0\3\52\3\0\14\52\4\0\5\52\3\0\3\52\1\0\4\52"+
    "\2\0\1\52\6\0\1\52\16\0\12\52\11\0\1\52\7\0\3\52"+
    "\1\0\10\52\1\0\3\52\1\0\27\52\1\0\12\52\1\0\5\52"+
    "\3\0\10\52\1\0\3\52\1\0\4\52\7\0\2\52\1\0\2\52"+
    "\6\0\4\52\2\0\12\52\22\0\2\52\1\0\10\52\1\0\3\52"+
    "\1\0\27\52\1\0\12\52\1\0\5\52\2\0\11\52\1\0\3\52"+
    "\1\0\4\52\7\0\2\52\7\0\1\52\1\0\4\52\2\0\12\52"+
    "\1\0\2\52\17\0\2\52\1\0\10\52\1\0\3\52\1\0\51\52"+
    "\2\0\10\52\1\0\3\52\1\0\5\52\10\0\1\52\10\0\4\52"+
    "\2\0\12\52\12\0\6\52\2\0\2\52\1\0\22\52\3\0\30\52"+
    "\1\0\11\52\1\0\1\52\2\0\7\52\3\0\1\52\4\0\6\52"+
    "\1\0\1\52\1\0\10\52\22\0\2\52\15\0\72\52\4\0\20\52"+
    "\1\0\12\52\47\0\2\52\1\0\1\52\2\0\2\52\1\0\1\52"+
    "\2\0\1\52\6\0\4\52\1\0\7\52\1\0\3\52\1\0\1\52"+
    "\1\0\1\52\2\0\2\52\1\0\15\52\1\0\3\52\2\0\5\52"+
    "\1\0\1\52\1\0\6\52\2\0\12\52\2\0\4\52\40\0\1\52"+
    "\27\0\2\52\6\0\12\52\13\0\1\52\1\0\1\52\1\0\1\52"+
    "\4\0\12\52\1\0\44\52\4\0\24\52\1\0\22\52\1\0\44\52"+
    "\11\0\1\52\71\0\112\52\6\0\116\52\2\0\46\52\1\0\1\52"+
    "\5\0\1\52\2\0\53\52\1\0\u014d\52\1\0\4\52\2\0\7\52"+
    "\1\0\1\52\1\0\4\52\2\0\51\52\1\0\4\52\2\0\41\52"+
    "\1\0\4\52\2\0\7\52\1\0\1\52\1\0\4\52\2\0\17\52"+
    "\1\0\71\52\1\0\4\52\2\0\103\52\2\0\3\52\40\0\20\52"+
    "\20\0\125\52\14\0\u026c\52\2\0\21\52\1\0\32\52\5\0\113\52"+
    "\3\0\3\52\17\0\15\52\1\0\7\52\13\0\25\52\13\0\24\52"+
    "\14\0\15\52\1\0\3\52\1\0\2\52\14\0\124\52\3\0\1\52"+
    "\3\0\3\52\2\0\12\52\41\0\3\52\2\0\12\52\6\0\130\52"+
    "\10\0\53\52\5\0\106\52\12\0\35\52\3\0\14\52\4\0\14\52"+
    "\12\0\50\52\2\0\5\52\13\0\54\52\4\0\32\52\6\0\12\52"+
    "\46\0\34\52\4\0\77\52\1\0\35\52\2\0\13\52\6\0\12\52"+
    "\15\0\1\52\130\0\114\52\4\0\12\52\21\0\11\52\14\0\164\52"+
    "\14\0\70\52\10\0\12\52\3\0\61\52\122\0\3\52\1\0\43\52"+
    "\11\0\347\52\25\0\u011a\52\2\0\6\52\2\0\46\52\2\0\6\52"+
    "\2\0\10\52\1\0\1\52\1\0\1\52\1\0\1\52\1\0\37\52"+
    "\2\0\65\52\1\0\7\52\1\0\1\52\3\0\3\52\1\0\7\52"+
    "\3\0\4\52\2\0\6\52\4\0\15\52\5\0\3\52\1\0\7\52"+
    "\16\0\5\52\30\0\1\47\1\47\5\52\20\0\2\52\23\0\1\52"+
    "\13\0\5\52\5\0\6\52\1\0\1\52\15\0\1\52\20\0\15\52"+
    "\3\0\33\52\25\0\15\52\4\0\1\52\3\0\14\52\21\0\1\52"+
    "\4\0\1\52\2\0\12\52\1\0\1\52\3\0\5\52\6\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\4\52\1\0\13\52\2\0\4\52"+
    "\5\0\5\52\4\0\1\52\21\0\51\52\u0a77\0\57\52\1\0\57\52"+
    "\1\0\205\52\6\0\11\52\14\0\46\52\1\0\1\52\5\0\1\52"+
    "\2\0\70\52\7\0\1\52\17\0\30\52\11\0\7\52\1\0\7\52"+
    "\1\0\7\52\1\0\7\52\1\0\7\52\1\0\7\52\1\0\7\52"+
    "\1\0\7\52\1\0\40\52\57\0\1\52\u01d5\0\3\52\31\0\17\52"+
    "\1\0\5\52\2\0\5\52\4\0\126\52\2\0\2\52\2\0\3\52"+
    "\1\0\132\52\1\0\4\52\5\0\51\52\3\0\136\52\21\0\33\52"+
    "\65\0\20\52\u0200\0\u19b6\52\112\0\u51cd\52\63\0\u048d\52\103\0\56\52"+
    "\2\0\u010d\52\3\0\34\52\24\0\60\52\4\0\12\52\1\0\31\52"+
    "\7\0\123\52\45\0\11\52\2\0\147\52\2\0\4\52\1\0\4\52"+
    "\14\0\13\52\115\0\60\52\20\0\1\52\7\0\64\52\14\0\105\52"+
    "\13\0\12\52\6\0\30\52\3\0\1\52\4\0\56\52\2\0\44\52"+
    "\14\0\35\52\3\0\101\52\16\0\13\52\46\0\67\52\11\0\16\52"+
    "\2\0\12\52\6\0\27\52\3\0\2\52\4\0\103\52\30\0\3\52"+
    "\2\0\20\52\2\0\5\52\12\0\6\52\2\0\6\52\2\0\6\52"+
    "\11\0\7\52\1\0\7\52\221\0\53\52\1\0\2\52\2\0\12\52"+
    "\6\0\u2ba4\52\14\0\27\52\4\0\61\52\u2104\0\u016e\52\2\0\152\52"+
    "\46\0\7\52\14\0\5\52\5\0\14\52\1\0\15\52\1\0\5\52"+
    "\1\0\1\52\1\0\2\52\1\0\2\52\1\0\154\52\41\0\u016b\52"+
    "\22\0\100\52\2\0\66\52\50\0\15\52\3\0\20\52\20\0\7\52"+
    "\14\0\2\52\30\0\3\52\31\0\1\52\6\0\5\52\1\0\207\52"+
    "\2\0\1\52\4\0\1\52\13\0\12\52\7\0\32\52\4\0\1\52"+
    "\1\0\32\52\13\0\131\52\3\0\6\52\2\0\6\52\2\0\6\52"+
    "\2\0\3\52\3\0\2\52\3\0\2\52\22\0\3\52\4\0\14\52"+
    "\1\0\32\52\1\0\23\52\1\0\2\52\1\0\17\52\2\0\16\52"+
    "\42\0\173\52\105\0\65\52\210\0\1\52\202\0\35\52\3\0\61\52"+
    "\57\0\37\52\21\0\33\52\65\0\36\52\2\0\44\52\4\0\10\52"+
    "\1\0\5\52\52\0\236\52\2\0\12\52\u0356\0\6\52\2\0\1\52"+
    "\1\0\54\52\1\0\2\52\3\0\1\52\2\0\27\52\252\0\26\52"+
    "\12\0\32\52\106\0\70\52\6\0\2\52\100\0\4\52\1\0\2\52"+
    "\5\0\10\52\1\0\3\52\1\0\33\52\4\0\3\52\4\0\1\52"+
    "\40\0\35\52\203\0\66\52\12\0\26\52\12\0\23\52\215\0\111\52"+
    "\u03b7\0\107\52\37\0\12\52\20\0\73\52\2\0\1\52\22\0\31\52"+
    "\7\0\12\52\6\0\65\52\1\0\12\52\100\0\105\52\13\0\12\52"+
    "\u04a6\0\70\52\10\0\12\52\u0936\0\u036f\52\221\0\143\52\u0b9d\0\u042f\52"+
    "\u33d1\0\u0239\52\u04c7\0\105\52\13\0\57\52\20\0\21\52\u4060\0\2\52"+
    "\u2163\0\5\52\3\0\26\52\2\0\7\52\36\0\4\52\224\0\3\52"+
    "\u01bb\0\125\52\1\0\107\52\1\0\2\52\2\0\1\52\2\0\2\52"+
    "\2\0\4\52\1\0\14\52\1\0\1\52\1\0\7\52\1\0\101\52"+
    "\1\0\4\52\2\0\10\52\1\0\7\52\1\0\34\52\1\0\4\52"+
    "\1\0\5\52\1\0\1\52\3\0\7\52\1\0\u0154\52\2\0\31\52"+
    "\1\0\31\52\1\0\37\52\1\0\31\52\1\0\37\52\1\0\31\52"+
    "\1\0\37\52\1\0\31\52\1\0\37\52\1\0\31\52\1\0\10\52"+
    "\2\0\62\52\u1600\0\4\52\1\0\33\52\1\0\2\52\1\0\1\52"+
    "\2\0\1\52\1\0\12\52\1\0\4\52\1\0\1\52\1\0\1\52"+
    "\6\0\1\52\4\0\1\52\1\0\1\52\1\0\1\52\1\0\3\52"+
    "\1\0\2\52\1\0\1\52\2\0\1\52\1\0\1\52\1\0\1\52"+
    "\1\0\1\52\1\0\1\52\1\0\2\52\1\0\1\52\2\0\4\52"+
    "\1\0\7\52\1\0\4\52\1\0\4\52\1\0\1\52\1\0\12\52"+
    "\1\0\21\52\5\0\3\52\1\0\5\52\1\0\21\52\u1144\0\ua6d7\52"+
    "\51\0\u1035\52\13\0\336\52\u3fe2\0\u021e\52\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\52\36\0\140\52\200\0\360\52\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\0\4\1\3\3\25\1\1\4"+
    "\1\5\1\6\1\0\3\7\1\10\2\0\4\4\1\11"+
    "\7\4\1\12\1\13\11\4\2\0\1\14\1\0\1\15"+
    "\1\5\1\10\1\3\1\4\1\16\1\17\1\20\1\3"+
    "\6\4\1\21\2\4\1\22\12\4\1\23\1\24\2\4"+
    "\1\25\6\4\1\26\2\4\1\27\1\30\1\4\1\31"+
    "\1\4\1\32\3\4\1\33\3\4\1\34\1\4\1\35"+
    "\1\4\1\36\1\37\1\40\1\41\1\42\1\4\1\43"+
    "\1\4\1\44\1\45\1\46\1\47\1\50\1\4\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\54\0\130\0\54\0\204\0\260\0\334\0\u0108"+
    "\0\u0134\0\u0160\0\u018c\0\334\0\u01b8\0\u01e4\0\u0210\0\u023c"+
    "\0\u0268\0\u0294\0\u02c0\0\u02ec\0\u0318\0\u0344\0\u0370\0\u039c"+
    "\0\u03c8\0\u03f4\0\u0420\0\u044c\0\u0478\0\u04a4\0\u04d0\0\u04fc"+
    "\0\u0528\0\130\0\u0554\0\54\0\u0580\0\u05ac\0\54\0\u05d8"+
    "\0\334\0\u0604\0\u0630\0\u065c\0\u0688\0\u06b4\0\u06e0\0\130"+
    "\0\u070c\0\u0738\0\u0764\0\u0790\0\u07bc\0\u07e8\0\u0814\0\130"+
    "\0\130\0\u0840\0\u086c\0\u0898\0\u08c4\0\u08f0\0\u091c\0\u0948"+
    "\0\u0974\0\u09a0\0\u09cc\0\u04fc\0\54\0\u09f8\0\u0528\0\54"+
    "\0\54\0\130\0\u0a24\0\130\0\130\0\u0a50\0\54\0\u0a7c"+
    "\0\u0aa8\0\u0ad4\0\u0b00\0\u0b2c\0\u0b58\0\130\0\u0b84\0\u0bb0"+
    "\0\130\0\u0bdc\0\u0c08\0\u0c34\0\u0c60\0\u0c8c\0\u0cb8\0\u0ce4"+
    "\0\u0d10\0\u0d3c\0\u0d68\0\54\0\u09f8\0\u0d94\0\u0dc0\0\130"+
    "\0\u0dec\0\u0e18\0\u0e44\0\u0e70\0\u0e9c\0\u0ec8\0\130\0\u0ef4"+
    "\0\u0f20\0\130\0\130\0\u0f4c\0\130\0\u0f78\0\130\0\u0fa4"+
    "\0\u0fd0\0\u0ffc\0\130\0\u1028\0\u1054\0\u1080\0\130\0\u10ac"+
    "\0\130\0\u10d8\0\130\0\130\0\130\0\130\0\130\0\u1104"+
    "\0\130\0\u1130\0\130\0\130\0\130\0\130\0\130\0\u115c"+
    "\0\54";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\2\1\4\1\5\1\2\1\6\2\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\2\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\3\1\30\1\31\1\32\1\3\1\33\1\34"+
    "\1\3\1\2\1\35\1\36\1\37\1\3\2\0\1\40"+
    "\1\2\1\41\55\0\2\42\5\0\1\42\11\0\20\42"+
    "\1\0\4\42\4\0\1\42\5\0\1\4\54\0\1\43"+
    "\57\0\1\44\52\0\1\45\1\44\46\0\1\44\4\0"+
    "\1\46\6\0\1\47\44\0\1\44\1\14\52\0\1\44"+
    "\1\0\1\14\51\0\1\50\3\0\1\51\47\0\1\47"+
    "\4\0\1\52\46\0\1\47\6\0\1\53\33\0\2\42"+
    "\5\0\1\42\11\0\1\42\1\54\6\42\1\55\7\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\5\0\1\42"+
    "\11\0\3\42\1\56\5\42\1\57\6\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\3\42"+
    "\1\60\2\42\1\61\11\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\4\42\1\62\13\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\5\0\1\42"+
    "\11\0\6\42\1\63\11\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\1\42\1\64\16\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\5\0\1\42"+
    "\11\0\1\42\1\65\6\42\1\66\7\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\3\42"+
    "\1\67\14\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\1\42\1\70\5\42\1\71\10\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\5\0\1\42"+
    "\11\0\5\42\1\72\1\73\11\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\14\42\1\74"+
    "\3\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\14\42\1\75\3\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\11\42\1\76"+
    "\6\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\1\77\7\42\1\100\7\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\3\42"+
    "\1\101\14\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\4\42\1\102\13\42\1\0\4\42"+
    "\4\0\1\42\1\103\2\104\17\103\20\104\1\103\4\104"+
    "\1\103\1\104\1\105\2\104\6\0\1\106\44\0\1\107"+
    "\6\0\1\110\52\0\1\110\4\0\1\44\53\0\1\47"+
    "\60\0\1\47\41\0\1\111\4\0\1\44\46\0\1\47"+
    "\47\0\2\42\5\0\1\42\11\0\2\42\1\112\15\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\5\0\1\42"+
    "\11\0\11\42\1\113\6\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\15\42\1\114\2\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\5\0\1\42"+
    "\11\0\10\42\1\115\7\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\7\42\1\116\10\42"+
    "\1\0\4\42\4\0\1\42\1\0\2\42\2\0\1\117"+
    "\2\0\1\42\11\0\20\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\2\42\1\120\7\42"+
    "\1\121\2\42\1\122\2\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\2\42\1\123\5\42"+
    "\1\124\4\42\1\125\2\42\1\0\4\42\4\0\1\42"+
    "\1\0\2\42\5\0\1\42\11\0\2\42\1\126\7\42"+
    "\1\127\5\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\12\42\1\130\5\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\4\42"+
    "\1\131\13\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\17\42\1\132\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\10\42\1\133"+
    "\7\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\6\42\1\134\2\42\1\135\6\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\6\42\1\136\11\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\6\42\1\137\11\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\12\42\1\140\5\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\1\141\17\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\2\42"+
    "\1\142\15\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\6\42\1\143\11\42\1\0\4\42"+
    "\4\0\1\42\51\103\1\144\2\103\53\0\1\145\1\0"+
    "\2\42\5\0\1\42\11\0\1\146\17\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\11\42"+
    "\1\147\6\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\3\42\1\150\14\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\20\42"+
    "\1\0\1\151\3\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\5\42\1\152\12\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\6\42\1\153"+
    "\11\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\6\42\1\154\11\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\11\42\1\155"+
    "\6\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\5\42\1\156\12\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\6\42\1\157"+
    "\2\42\1\160\6\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\6\42\1\161\11\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\7\42\1\162\10\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\1\42\1\163\16\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\10\42\1\164\7\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\1\42\1\165\16\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\10\42\1\166\7\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\6\42\1\167\11\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\12\42\1\170\5\42\1\0\4\42\4\0\1\42\1\0"+
    "\2\42\5\0\1\42\11\0\5\42\1\171\12\42\1\0"+
    "\4\42\4\0\1\42\1\0\2\42\5\0\1\42\11\0"+
    "\1\172\17\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\12\42\1\173\5\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\1\42"+
    "\1\174\16\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\5\42\1\175\12\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\4\42"+
    "\1\176\13\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\7\42\1\177\10\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\12\42"+
    "\1\200\5\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\10\42\1\201\7\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\4\42"+
    "\1\202\13\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\7\42\1\203\10\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\4\42"+
    "\1\204\13\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\6\42\1\205\11\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\2\42"+
    "\1\206\15\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\12\42\1\207\5\42\1\0\4\42"+
    "\4\0\1\42\1\0\2\42\5\0\1\42\11\0\10\42"+
    "\1\210\7\42\1\0\4\42\4\0\1\42\1\0\2\42"+
    "\5\0\1\42\11\0\20\42\1\0\3\42\1\211\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\6\42\1\212"+
    "\11\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\6\42\1\213\11\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\1\42\1\214"+
    "\16\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\12\42\1\215\5\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\6\42\1\216"+
    "\11\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\6\42\1\217\11\42\1\0\4\42\4\0"+
    "\1\42\1\0\2\42\5\0\1\42\11\0\2\42\1\220"+
    "\15\42\1\0\4\42\4\0\1\42\1\0\2\42\5\0"+
    "\1\42\11\0\20\42\1\221\4\42\4\0\1\42";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4488];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\1\0\36\1\1\11\1\0"+
    "\1\1\1\11\2\1\2\0\27\1\2\0\1\11\1\0"+
    "\1\1\2\11\5\1\1\11\24\1\1\11\54\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[145];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  private Symbol symbol(int type) {

     return new Symbol(type,yyline,yycolumn);

   }

  private Symbol symbol(int type,Object value){
  	return new Symbol(type,yyline,yycolumn,value);
  }
 /* Fin Declaraciones */


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  analex(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2512) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.PUNTO);
            }
          case 42: break;
          case 2: 
            { return symbol(sym.CRLF);
            }
          case 43: break;
          case 3: 
            { return symbol(sym.LOGICO,new String(yytext()));
            }
          case 44: break;
          case 4: 
            { return symbol(sym.ID, new String(yytext()));
            }
          case 45: break;
          case 5: 
            { return symbol(sym.OPERADOR, new String(yytext()));
            }
          case 46: break;
          case 6: 
            { return symbol(sym.ASIGNACION, new String(yytext()));
            }
          case 47: break;
          case 7: 
            { return symbol(sym.COMPARACION, new String(yytext()));
            }
          case 48: break;
          case 8: 
            { return symbol(sym.CONCATENACION, new String(yytext()));
            }
          case 49: break;
          case 9: 
            { return symbol(sym.DO);
            }
          case 50: break;
          case 10: 
            { return symbol(sym.IN);
            }
          case 51: break;
          case 11: 
            { return symbol(sym.IF);
            }
          case 52: break;
          case 12: 
            { return symbol(sym.STRING, new String(yytext()));
            }
          case 53: break;
          case 13: 
            { return symbol(sym.INT,new Integer(yytext()));
            }
          case 54: break;
          case 14: 
            { return symbol(sym.NOT);
            }
          case 55: break;
          case 15: 
            { return symbol(sym.NIL);
            }
          case 56: break;
          case 16: 
            { return symbol(sym.DEF);
            }
          case 57: break;
          case 17: 
            { return symbol(sym.END);
            }
          case 58: break;
          case 18: 
            { return symbol(sym.FOR);
            }
          case 59: break;
          case 19: 
            { return symbol(sym.LITERAL, new String(yytext()));
            }
          case 60: break;
          case 20: 
            { return symbol(sym.DOUBLE,new Double(yytext()));
            }
          case 61: break;
          case 21: 
            { return symbol(sym.REDO);
            }
          case 62: break;
          case 22: 
            { return symbol(sym.ELSE);
            }
          case 63: break;
          case 23: 
            { return symbol(sym.SELF);
            }
          case 64: break;
          case 24: 
            { return symbol(sym.WHEN);
            }
          case 65: break;
          case 25: 
            { return symbol(sym.THEN);
            }
          case 66: break;
          case 26: 
            { return symbol(sym.CASE);
            }
          case 67: break;
          case 27: 
            { return symbol(sym.ALIAS);
            }
          case 68: break;
          case 28: 
            { return symbol(sym.UNDEF);
            }
          case 69: break;
          case 29: 
            { return symbol(sym.UNTIL);
            }
          case 70: break;
          case 30: 
            { return symbol(sym.ELSIF);
            }
          case 71: break;
          case 31: 
            { return symbol(sym.SUPER);
            }
          case 72: break;
          case 32: 
            { return symbol(sym.WHILE);
            }
          case 73: break;
          case 33: 
            { return symbol(sym.YIELD);
            }
          case 74: break;
          case 34: 
            { return symbol(sym.CLASS);
            }
          case 75: break;
          case 35: 
            { return symbol(sym.BREAK);
            }
          case 76: break;
          case 36: 
            { return symbol(sym.RESCUE);
            }
          case 77: break;
          case 37: 
            { return symbol(sym.RETURN);
            }
          case 78: break;
          case 38: 
            { return symbol(sym.UNLESS);
            }
          case 79: break;
          case 39: 
            { return symbol(sym.ENSURE);
            }
          case 80: break;
          case 40: 
            { return symbol(sym.MODULE);
            }
          case 81: break;
          case 41: 
            { return symbol(sym.DEFINED);
            }
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
